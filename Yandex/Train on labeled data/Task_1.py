import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import scipy.optimize as optimize
import seaborn as sns
from scipy.optimize import minimize_scalar
from mpl_toolkits.mplot3d import Axes3D

# –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ—Å—Ç—É –∏ –≤–µ—Å—É (weights_heights.csv, –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–π –≤ –∑–∞–¥–∞–Ω–∏–∏) –≤ –æ–±—ä–µ–∫—Ç Pandas DataFrame:
data = pd.read_csv('weights_heights.csv', index_col='Index')

# –ü–æ—Å—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –∏–∑ –≤—ã–±–æ—Ä–∫–∏ data.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ plot –¥–ª—è DataFrame data c –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ y='Height' (—ç—Ç–æ —Ç–æ—Ç –ø—Ä–∏–∑–Ω–∞–∫, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å—Ç—Ä–æ–∏–º)

data.plot(y='Height', kind='hist',
          color='red', title='Height (inch.) distribution')

# –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ head Pandas DataFrame.
# –ù–∞—Ä–∏—Å—É–π—Ç–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ plot Pandas DataFrame.
# –°–¥–µ–ª–∞–π—Ç–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∑–µ–ª–µ–Ω–æ–π, –ø–æ–¥–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.
data.head(5)
data.plot(y='Weight', kind='hist',
          color='green', title='Weight (f.) distribution')


# –û–¥–∏–Ω –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ø–∞—Ä–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
# –°–æ–∑–¥–∞–µ—Ç—Å—è  ùëö√óùëö  –≥—Ä–∞—Ñ–∏–∫–æ–≤ (m* - —á–∏—Å–ª–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤), –≥–¥–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Ä–∏—Å—É—é—Ç—Å—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤,
# –∞ –≤–Ω–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ - scatter plots –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
# –≠—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞  ùë†ùëêùëéùë°ùë°ùëíùëü_ùëöùëéùë°ùëüùëñùë•  Pandas Data Frame –∏–ª–∏ *pairplot –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Seaborn.
#
# –ß—Ç–æ–±—ã –ø—Ä–æ–∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ—Ç–∏–π –ø—Ä–∏–∑–Ω–∞–∫.
# –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–∑–Ω–∞–∫ –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (BMI).
# –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —É–¥–æ–±–Ω–æ–π —Å–≤—è–∑–∫–æ–π –º–µ—Ç–æ–¥–∞ apply Pandas DataFrame –∏ lambda-—Ñ—É–Ω–∫—Ü–∏–π Python.

def make_bmi(height_inch, weight_pound):
    METER_TO_INCH, KILO_TO_POUND = 39.37, 2.20462
    return (weight_pound / KILO_TO_POUND) / \
           (height_inch / METER_TO_INCH) ** 2


data['BMI'] = data.apply(lambda row: make_bmi(row['Height'],
                                              row['Weight']), axis=1)

# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ–ø–∞—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ,
# 'Height', 'Weight' –∏ 'BMI' –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ pairplot –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Seaborn.

sns.pairplot(data)


# –ß–∞—Å—Ç–æ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–¥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ
# (—Å–∫–∞–∂–µ–º, –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞).
# –í —ç—Ç–æ–º –ø–æ–º–æ–≥—É—Ç "—è—â–∏–∫–∏ —Å —É—Å–∞–º–∏" - boxplots –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Seaborn.
# Box plot - —ç—Ç–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ (—Å—Ä–µ–¥–Ω–µ–µ –∏ –∫–≤–∞—Ä—Ç–∏–ª–∏)
# –ø–æ —Ä–∞–∑–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞.
# –¢–∞–∫–∂–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å "–≤—ã–±—Ä–æ—Å—ã" - –Ω–∞–±–ª—é–¥–µ–Ω–∏—è,
# –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö.
#
# –°–æ–∑–¥–∞–π—Ç–µ –≤ DataFrame data –Ω–æ–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫ weight_category,
# –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å 3 –∑–Ω–∞—á–µ–Ω–∏—è: 1 ‚Äì –µ—Å–ª–∏ –≤–µ—Å –º–µ–Ω—å—à–µ 120 —Ñ—É–Ω—Ç–æ–≤.
# (~ 54 –∫–≥.), 3 - –µ—Å–ª–∏ –≤–µ—Å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 150 —Ñ—É–Ω—Ç–æ–≤ (~68 –∫–≥.), 2 ‚Äì –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ ¬´—è—â–∏–∫ —Å —É—Å–∞–º–∏¬ª (boxplot), –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –æ—Ç –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ boxplot –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Seaborn –∏ –º–µ—Ç–æ–¥ apply Pandas DataFrame.
# –ü–æ–¥–ø–∏—à–∏—Ç–µ –æ—Å—å y* –º–µ—Ç–∫–æ–π ¬´–†–æ—Å—Ç¬ª, –æ—Å—å *x ‚Äì –º–µ—Ç–∫–æ–π ¬´–í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è¬ª.

def weight_category(weight):
    if weight < 120:
        return 1
    elif weight >= 150:
        return 3
    else:
        return 2


data['weight_cat'] = data['Weight'].apply(weight_category)

sns.boxplot(data=data, x='weight_cat', y='Height')

# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ scatter plot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –æ—Ç –≤–µ—Å–∞,
# –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ plot –¥–ª—è Pandas DataFrame —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º kind='scatter'. –ü–æ–¥–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.

data.plot(y='Height', x='Weight', kind='scatter',
          color='blue', title='Height (Weight) depending')


# –ó–∞–¥–∞–Ω–∏–µ 2. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏

# –í –ø—Ä–æ—Å—Ç–µ–π—à–µ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
# –ø–æ –ø—Ä–æ—á–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º (–∑–∞–¥–∞—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏) —Ä–µ—à–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏.
#
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –¥–≤—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º  ùë§0  –∏  ùë§1  –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
# ùë¶  –æ—Ç –≤–µ—Å–∞  ùë•  –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–µ–π  ùë¶=ùë§0+ùë§1‚àóùë• :
# ùëíùëüùëüùëúùëü(ùë§0,ùë§1)=‚àëùëñ=1ùëõ(ùë¶ùëñ‚àí(ùë§0+ùë§1‚àóùë•ùëñ))2
#
# –ó–¥–µ—Å—å  ùëõ  ‚Äì —á–∏—Å–ª–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö,  ùë¶ùëñ  –∏  ùë•ùëñ  ‚Äì —Ä–æ—Å—Ç –∏ –≤–µ—Å  ùëñ -–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.

def error(w0, w1):
    s = 0.
    x = data['Weight']
    y = data['Height']
    for i in range(1, len(data.index)):
        s += (y[i] - w0 - w1 * x[i]) ** 2
    return s


# –ò—Ç–∞–∫, –º—ã —Ä–µ—à–∞–µ–º –∑–∞–¥–∞—á—É: –∫–∞–∫ —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ —Ç–æ—á–µ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º –≤ –Ω–∞—à–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö,
# –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ "–†–æ—Å—Ç" –∏ "–í–µ—Å" –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é —Ç–∞–∫, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ –ø. 6.
# –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∑–∏–º —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä—è–º—ã–µ –∏ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∏ –ø–ª–æ—Ö–æ –ø–µ—Ä–µ–¥–∞—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –æ—Ç –≤–µ—Å–∞.
#
# –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∏–∑ –ø. 5 –ó–∞–¥–∞–Ω–∏—è 1 –¥–≤–µ –ø—Ä—è–º—ã–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ( ùë§0,ùë§1)=(60,0.05)
# –∏ ( ùë§0,ùë§1)=(50,0.16).
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ plot –∏–∑ matplotlib.pyplot, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥ linspace –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ NumPy. –ü–æ–¥–ø–∏—à–∏—Ç–µ –æ—Å–∏ –∏ –≥—Ä–∞—Ñ–∏–∫.

x = np.array(data['Weight'])
w0, w1 = 60, 0.05
y1 = [w0 + t * w1 for t in x]

w0, w1 = 50, 0.16
y2 = [w0 + t * w1 for t in x]

data.plot(y='Height', x='Weight', kind='scatter',
          color='blue', title='Height (Weight) depending')

plt.plot(x, y1, color="red", label="line1")
plt.plot(x, y2, color="green", label="line2")
plt.grid(True)
plt.legend(loc='upper left')

# –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞, –ø–æ—Å–∫–æ–ª—å–∫—É —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø—É–∫–ª–∞—è.
# –î–ª—è —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
# –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –æ—à–∏–±–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–Ω–∞–∫–ª–æ–Ω –ø—Ä—è–º–æ–π),
# –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä (—Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å.
#
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏, –ø–æ—Å—á–∏—Ç–∞–Ω–Ω–æ–π –≤ –ø. 6, –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  ùë§1  –ø—Ä–∏  ùë§0  = 50.
# –ü–æ–¥–ø–∏—à–∏—Ç–µ –æ—Å–∏ –∏ –≥—Ä–∞—Ñ–∏–∫.

w0 = 50.
w = np.arange(-0.5, 0.8, 0.1)

err = [error(w0, w1) for w1 in w]
plt.title('Error')
plt.xlabel('w1 ')
plt.ylabel('error(50,w1)')

plt.plot(w, err, color="red", label="function of error")
plt.legend()


# –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–º "–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π" –Ω–∞–∫–ª–æ–Ω –ø—Ä—è–º–æ–π, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –æ—Ç –≤–µ—Å–∞,
# –ø—Ä–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ  ùë§0=50 .
#
# –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ minimize_scalar –∏–∑ scipy.optimize –Ω–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤ –ø. 6,
# –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  ùë§1  –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-5,5].
# –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∏–∑ –ø. 5 –ó–∞–¥–∞–Ω–∏—è 1 –ø—Ä—è–º—É—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é
# –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ( ùë§0 ,  ùë§1 ) = (50,  ùë§1_ùëúùëùùë° ), –≥–¥–µ  ùë§1_ùëúùëùùë°  ‚Äì –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤
# –ø.8 –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  ùë§1 .


def error50(w1):
    return error(50, w1)


min = minimize_scalar(error50, bounds=(-5, 5), method='bounded')
w1_opt = min.x

x = np.array(data['Weight'])

w0, w1 = 50, w1_opt
y = [w0 + t * w1 for t in x]

data.plot(y='Height', x='Weight', kind='scatter',
          color='blue', title='Height (Weight) depending')

plt.plot(x, y, color="red", label="lineOptimum")

plt.grid(True)
plt.legend(loc='upper left')

# –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–æ–≤–µ–∫ —á–∞—Å—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# –æ –ø—Ä–∏—Ä–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
# –£–≤—ã, –ø—Ä–∏ —á–∏—Å–ª–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–æ–ª—å—à–µ 3 —Ç–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
# –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ 2D –∏ 3D –≤ –¥–∞–Ω–Ω—ã—Ö –≤—ã–¥–µ–ª–∞—è—é—Ç 2 –∏–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ,
# 3 –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∫–∞–∫ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è - –º—ã —É–≤–∏–¥–∏–º –¥–∞–ª–µ–µ –≤ –∫—É—Ä—Å–µ)
# –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–ª–∏ –≤ –æ–±—ä–µ–º–µ.
#
# –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –≤ Python —Ä–∏—Å–æ–≤–∞—Ç—å 3D –∫–∞—Ä—Ç–∏–Ω–∫–∏,
# –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏  ùëß(ùë•,ùë¶)=ùë†ùëñùëõ(ùë•2+ùë¶2‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚àö)  –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π  ùë•  –∏  ùë¶
# –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [-5,5] c —à–∞–≥–æ–º 0.25.

fig = plt.figure()
ax = fig.gca(projection='3d')  # get current axis

# –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã NumPy —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ç–æ—á–µ–∫ –ø–æ –æ—Å—è–º X –∏ –£.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ meshgrid, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ –≤–µ–∫—Ç–æ—Ä–∞–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
# —Å–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ó–∞–¥–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Z(x, y).
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
Z = np.sin(np.sqrt(X ** 2 + Y ** 2))

# –ù–∞–∫–æ–Ω–µ—Ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ *plot_surface* –æ–±—ä–µ–∫—Ç–∞
# —Ç–∏–ø–∞ Axes3DSubplot. –¢–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–∏.
surf = ax.plot_surface(X, Y, Z)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.show()

# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ 3D-–≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏, –ø–æ—Å—á–∏—Ç–∞–Ω–Ω–æ–π –≤ –ø.6 –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤  ùë§0  –∏  ùë§1 .
# –ü–æ–¥–ø–∏—à–∏—Ç–µ –æ—Å—å  ùë•  –º–µ—Ç–∫–æ–π ¬´Intercept¬ª, –æ—Å—å  ùë¶  ‚Äì –º–µ—Ç–∫–æ–π ¬´Slope¬ª, a –æ—Å—å  ùëß  ‚Äì –º–µ—Ç–∫–æ–π ¬´Error¬ª.

fig = plt.figure()
ax = fig.gca(projection='3d')
w0 = np.arange(-5, 5, 0.25)
w1 = np.arange(-5, 5, 0.25)
W0, W1 = np.meshgrid(w0, w1)
E = error(W0, W1)


# –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ minimize –∏–∑ scipy.optimize –Ω–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–∏,
# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤ –ø. 6, –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  ùë§0  –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-100,100] –∏  ùë§1  - –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-5, 5].
# –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äì ( ùë§0 ,  ùë§1 ) = (0, 0).
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ L-BFGS-B (–∞—Ä–≥—É–º–µ–Ω—Ç method –º–µ—Ç–æ–¥–∞ minimize).
# –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∏–∑ –ø. 5 –ó–∞–¥–∞–Ω–∏—è 1 –ø—Ä—è–º—É—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤  ùë§0  –∏  ùë§1.
# –ü–æ–¥–ø–∏—à–∏—Ç–µ –æ—Å–∏ –∏ –≥—Ä–∞—Ñ–∏–∫.

def error1(w):
    s = 0.
    x = data['Weight']
    y = data['Height']
    for i in range(1, len(data.index)):
        s += (y[i] - w[0] - w[1] * x[i]) ** 2
    return s


min = optimize.minimize(error1, np.array([0, 0]), method='L-BFGS-B', bounds=((-100, 100), (-5, 5)))
print(min.x, min.fun)

x = np.array(data['Weight'])

w0, w1 = min.x
y = [w0 + t * w1 for t in x]

data.plot(y='Height', x='Weight', kind='scatter',
          color='blue', title='Height (Weight) depending')

plt.plot(x, y, color="red", label="lineOptimum")

plt.grid(True)
plt.legend(loc='upper left')
